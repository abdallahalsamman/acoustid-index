// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index.proto

#ifndef PROTOBUF_INCLUDED_index_2eproto
#define PROTOBUF_INCLUDED_index_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_index_2eproto 

namespace protobuf_index_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_index_2eproto
namespace Acoustid {
namespace Server {
namespace PB {
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
class SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class SearchResult;
class SearchResultDefaultTypeInternal;
extern SearchResultDefaultTypeInternal _SearchResult_default_instance_;
}  // namespace PB
}  // namespace Server
}  // namespace Acoustid
namespace google {
namespace protobuf {
template<> ::Acoustid::Server::PB::SearchRequest* Arena::CreateMaybeMessage<::Acoustid::Server::PB::SearchRequest>(Arena*);
template<> ::Acoustid::Server::PB::SearchResponse* Arena::CreateMaybeMessage<::Acoustid::Server::PB::SearchResponse>(Arena*);
template<> ::Acoustid::Server::PB::SearchResult* Arena::CreateMaybeMessage<::Acoustid::Server::PB::SearchResult>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Acoustid {
namespace Server {
namespace PB {

// ===================================================================

class SearchResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.SearchResult) */ {
 public:
  SearchResult();
  virtual ~SearchResult();

  SearchResult(const SearchResult& from);

  inline SearchResult& operator=(const SearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchResult(SearchResult&& from) noexcept
    : SearchResult() {
    *this = ::std::move(from);
  }

  inline SearchResult& operator=(SearchResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResult* internal_default_instance() {
    return reinterpret_cast<const SearchResult*>(
               &_SearchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SearchResult* other);
  friend void swap(SearchResult& a, SearchResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchResult* New() const final {
    return CreateMaybeMessage<SearchResult>(NULL);
  }

  SearchResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchResult& from);
  void MergeFrom(const SearchResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 doc_id = 1;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::uint32 doc_id() const;
  void set_doc_id(::google::protobuf::uint32 value);

  // float score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.SearchResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 doc_id_;
  float score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_index_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SearchRequest* other);
  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(NULL);
  }

  SearchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 terms = 2;
  int terms_size() const;
  void clear_terms();
  static const int kTermsFieldNumber = 2;
  ::google::protobuf::uint32 terms(int index) const;
  void set_terms(int index, ::google::protobuf::uint32 value);
  void add_terms(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      terms() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_terms();

  // string index_name = 1;
  void clear_index_name();
  static const int kIndexNameFieldNumber = 1;
  const ::std::string& index_name() const;
  void set_index_name(const ::std::string& value);
  #if LANG_CXX11
  void set_index_name(::std::string&& value);
  #endif
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  ::std::string* mutable_index_name();
  ::std::string* release_index_name();
  void set_allocated_index_name(::std::string* index_name);

  // int32 max_results = 3;
  void clear_max_results();
  static const int kMaxResultsFieldNumber = 3;
  ::google::protobuf::int32 max_results() const;
  void set_max_results(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.SearchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > terms_;
  mutable int _terms_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr index_name_;
  ::google::protobuf::int32 max_results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_index_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.SearchResponse) */ {
 public:
  SearchResponse();
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SearchResponse* other);
  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const final {
    return CreateMaybeMessage<SearchResponse>(NULL);
  }

  SearchResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Acoustid.Server.PB.SearchResult results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::Acoustid::Server::PB::SearchResult* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::Acoustid::Server::PB::SearchResult >*
      mutable_results();
  const ::Acoustid::Server::PB::SearchResult& results(int index) const;
  ::Acoustid::Server::PB::SearchResult* add_results();
  const ::google::protobuf::RepeatedPtrField< ::Acoustid::Server::PB::SearchResult >&
      results() const;

  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.SearchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Acoustid::Server::PB::SearchResult > results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_index_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchResult

// uint32 doc_id = 1;
inline void SearchResult::clear_doc_id() {
  doc_id_ = 0u;
}
inline ::google::protobuf::uint32 SearchResult::doc_id() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.SearchResult.doc_id)
  return doc_id_;
}
inline void SearchResult::set_doc_id(::google::protobuf::uint32 value) {
  
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.SearchResult.doc_id)
}

// float score = 2;
inline void SearchResult::clear_score() {
  score_ = 0;
}
inline float SearchResult::score() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.SearchResult.score)
  return score_;
}
inline void SearchResult::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.SearchResult.score)
}

// -------------------------------------------------------------------

// SearchRequest

// string index_name = 1;
inline void SearchRequest::clear_index_name() {
  index_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchRequest::index_name() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.SearchRequest.index_name)
  return index_name_.GetNoArena();
}
inline void SearchRequest::set_index_name(const ::std::string& value) {
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.SearchRequest.index_name)
}
#if LANG_CXX11
inline void SearchRequest::set_index_name(::std::string&& value) {
  
  index_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Acoustid.Server.PB.SearchRequest.index_name)
}
#endif
inline void SearchRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Acoustid.Server.PB.SearchRequest.index_name)
}
inline void SearchRequest::set_index_name(const char* value, size_t size) {
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Acoustid.Server.PB.SearchRequest.index_name)
}
inline ::std::string* SearchRequest::mutable_index_name() {
  
  // @@protoc_insertion_point(field_mutable:Acoustid.Server.PB.SearchRequest.index_name)
  return index_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:Acoustid.Server.PB.SearchRequest.index_name)
  
  return index_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_index_name(::std::string* index_name) {
  if (index_name != NULL) {
    
  } else {
    
  }
  index_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_name);
  // @@protoc_insertion_point(field_set_allocated:Acoustid.Server.PB.SearchRequest.index_name)
}

// repeated uint32 terms = 2;
inline int SearchRequest::terms_size() const {
  return terms_.size();
}
inline void SearchRequest::clear_terms() {
  terms_.Clear();
}
inline ::google::protobuf::uint32 SearchRequest::terms(int index) const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.SearchRequest.terms)
  return terms_.Get(index);
}
inline void SearchRequest::set_terms(int index, ::google::protobuf::uint32 value) {
  terms_.Set(index, value);
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.SearchRequest.terms)
}
inline void SearchRequest::add_terms(::google::protobuf::uint32 value) {
  terms_.Add(value);
  // @@protoc_insertion_point(field_add:Acoustid.Server.PB.SearchRequest.terms)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SearchRequest::terms() const {
  // @@protoc_insertion_point(field_list:Acoustid.Server.PB.SearchRequest.terms)
  return terms_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SearchRequest::mutable_terms() {
  // @@protoc_insertion_point(field_mutable_list:Acoustid.Server.PB.SearchRequest.terms)
  return &terms_;
}

// int32 max_results = 3;
inline void SearchRequest::clear_max_results() {
  max_results_ = 0;
}
inline ::google::protobuf::int32 SearchRequest::max_results() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.SearchRequest.max_results)
  return max_results_;
}
inline void SearchRequest::set_max_results(::google::protobuf::int32 value) {
  
  max_results_ = value;
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.SearchRequest.max_results)
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .Acoustid.Server.PB.SearchResult results = 1;
inline int SearchResponse::results_size() const {
  return results_.size();
}
inline void SearchResponse::clear_results() {
  results_.Clear();
}
inline ::Acoustid::Server::PB::SearchResult* SearchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:Acoustid.Server.PB.SearchResponse.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Acoustid::Server::PB::SearchResult >*
SearchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:Acoustid.Server.PB.SearchResponse.results)
  return &results_;
}
inline const ::Acoustid::Server::PB::SearchResult& SearchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.SearchResponse.results)
  return results_.Get(index);
}
inline ::Acoustid::Server::PB::SearchResult* SearchResponse::add_results() {
  // @@protoc_insertion_point(field_add:Acoustid.Server.PB.SearchResponse.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Acoustid::Server::PB::SearchResult >&
SearchResponse::results() const {
  // @@protoc_insertion_point(field_list:Acoustid.Server.PB.SearchResponse.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB
}  // namespace Server
}  // namespace Acoustid

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_index_2eproto
