// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index.proto

#ifndef PROTOBUF_INCLUDED_index_2eproto
#define PROTOBUF_INCLUDED_index_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_index_2eproto 

namespace protobuf_index_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_index_2eproto
namespace Acoustid {
namespace Server {
namespace PB {
class BulkUpdateRequest;
class BulkUpdateRequestDefaultTypeInternal;
extern BulkUpdateRequestDefaultTypeInternal _BulkUpdateRequest_default_instance_;
class BulkUpdateResponse;
class BulkUpdateResponseDefaultTypeInternal;
extern BulkUpdateResponseDefaultTypeInternal _BulkUpdateResponse_default_instance_;
class DeleteDocumentOp;
class DeleteDocumentOpDefaultTypeInternal;
extern DeleteDocumentOpDefaultTypeInternal _DeleteDocumentOp_default_instance_;
class GetAttributeRequest;
class GetAttributeRequestDefaultTypeInternal;
extern GetAttributeRequestDefaultTypeInternal _GetAttributeRequest_default_instance_;
class GetAttributeResponse;
class GetAttributeResponseDefaultTypeInternal;
extern GetAttributeResponseDefaultTypeInternal _GetAttributeResponse_default_instance_;
class GetDocumentRequest;
class GetDocumentRequestDefaultTypeInternal;
extern GetDocumentRequestDefaultTypeInternal _GetDocumentRequest_default_instance_;
class GetDocumentResponse;
class GetDocumentResponseDefaultTypeInternal;
extern GetDocumentResponseDefaultTypeInternal _GetDocumentResponse_default_instance_;
class InsertOrUpdateDocumentOp;
class InsertOrUpdateDocumentOpDefaultTypeInternal;
extern InsertOrUpdateDocumentOpDefaultTypeInternal _InsertOrUpdateDocumentOp_default_instance_;
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
class SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class SearchResult;
class SearchResultDefaultTypeInternal;
extern SearchResultDefaultTypeInternal _SearchResult_default_instance_;
class SetAttributeOp;
class SetAttributeOpDefaultTypeInternal;
extern SetAttributeOpDefaultTypeInternal _SetAttributeOp_default_instance_;
}  // namespace PB
}  // namespace Server
}  // namespace Acoustid
namespace google {
namespace protobuf {
template<> ::Acoustid::Server::PB::BulkUpdateRequest* Arena::CreateMaybeMessage<::Acoustid::Server::PB::BulkUpdateRequest>(Arena*);
template<> ::Acoustid::Server::PB::BulkUpdateResponse* Arena::CreateMaybeMessage<::Acoustid::Server::PB::BulkUpdateResponse>(Arena*);
template<> ::Acoustid::Server::PB::DeleteDocumentOp* Arena::CreateMaybeMessage<::Acoustid::Server::PB::DeleteDocumentOp>(Arena*);
template<> ::Acoustid::Server::PB::GetAttributeRequest* Arena::CreateMaybeMessage<::Acoustid::Server::PB::GetAttributeRequest>(Arena*);
template<> ::Acoustid::Server::PB::GetAttributeResponse* Arena::CreateMaybeMessage<::Acoustid::Server::PB::GetAttributeResponse>(Arena*);
template<> ::Acoustid::Server::PB::GetDocumentRequest* Arena::CreateMaybeMessage<::Acoustid::Server::PB::GetDocumentRequest>(Arena*);
template<> ::Acoustid::Server::PB::GetDocumentResponse* Arena::CreateMaybeMessage<::Acoustid::Server::PB::GetDocumentResponse>(Arena*);
template<> ::Acoustid::Server::PB::InsertOrUpdateDocumentOp* Arena::CreateMaybeMessage<::Acoustid::Server::PB::InsertOrUpdateDocumentOp>(Arena*);
template<> ::Acoustid::Server::PB::Operation* Arena::CreateMaybeMessage<::Acoustid::Server::PB::Operation>(Arena*);
template<> ::Acoustid::Server::PB::SearchRequest* Arena::CreateMaybeMessage<::Acoustid::Server::PB::SearchRequest>(Arena*);
template<> ::Acoustid::Server::PB::SearchResponse* Arena::CreateMaybeMessage<::Acoustid::Server::PB::SearchResponse>(Arena*);
template<> ::Acoustid::Server::PB::SearchResult* Arena::CreateMaybeMessage<::Acoustid::Server::PB::SearchResult>(Arena*);
template<> ::Acoustid::Server::PB::SetAttributeOp* Arena::CreateMaybeMessage<::Acoustid::Server::PB::SetAttributeOp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Acoustid {
namespace Server {
namespace PB {

// ===================================================================

class GetDocumentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.GetDocumentRequest) */ {
 public:
  GetDocumentRequest();
  virtual ~GetDocumentRequest();

  GetDocumentRequest(const GetDocumentRequest& from);

  inline GetDocumentRequest& operator=(const GetDocumentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDocumentRequest(GetDocumentRequest&& from) noexcept
    : GetDocumentRequest() {
    *this = ::std::move(from);
  }

  inline GetDocumentRequest& operator=(GetDocumentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDocumentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDocumentRequest* internal_default_instance() {
    return reinterpret_cast<const GetDocumentRequest*>(
               &_GetDocumentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetDocumentRequest* other);
  friend void swap(GetDocumentRequest& a, GetDocumentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDocumentRequest* New() const final {
    return CreateMaybeMessage<GetDocumentRequest>(NULL);
  }

  GetDocumentRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetDocumentRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetDocumentRequest& from);
  void MergeFrom(const GetDocumentRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDocumentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string index_name = 1;
  void clear_index_name();
  static const int kIndexNameFieldNumber = 1;
  const ::std::string& index_name() const;
  void set_index_name(const ::std::string& value);
  #if LANG_CXX11
  void set_index_name(::std::string&& value);
  #endif
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  ::std::string* mutable_index_name();
  ::std::string* release_index_name();
  void set_allocated_index_name(::std::string* index_name);

  // uint32 doc_id = 2;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 2;
  ::google::protobuf::uint32 doc_id() const;
  void set_doc_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.GetDocumentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr index_name_;
  ::google::protobuf::uint32 doc_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_index_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDocumentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.GetDocumentResponse) */ {
 public:
  GetDocumentResponse();
  virtual ~GetDocumentResponse();

  GetDocumentResponse(const GetDocumentResponse& from);

  inline GetDocumentResponse& operator=(const GetDocumentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDocumentResponse(GetDocumentResponse&& from) noexcept
    : GetDocumentResponse() {
    *this = ::std::move(from);
  }

  inline GetDocumentResponse& operator=(GetDocumentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDocumentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDocumentResponse* internal_default_instance() {
    return reinterpret_cast<const GetDocumentResponse*>(
               &_GetDocumentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetDocumentResponse* other);
  friend void swap(GetDocumentResponse& a, GetDocumentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDocumentResponse* New() const final {
    return CreateMaybeMessage<GetDocumentResponse>(NULL);
  }

  GetDocumentResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetDocumentResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetDocumentResponse& from);
  void MergeFrom(const GetDocumentResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDocumentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 terms = 2;
  int terms_size() const;
  void clear_terms();
  static const int kTermsFieldNumber = 2;
  ::google::protobuf::uint32 terms(int index) const;
  void set_terms(int index, ::google::protobuf::uint32 value);
  void add_terms(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      terms() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_terms();

  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.GetDocumentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > terms_;
  mutable int _terms_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_index_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAttributeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.GetAttributeRequest) */ {
 public:
  GetAttributeRequest();
  virtual ~GetAttributeRequest();

  GetAttributeRequest(const GetAttributeRequest& from);

  inline GetAttributeRequest& operator=(const GetAttributeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAttributeRequest(GetAttributeRequest&& from) noexcept
    : GetAttributeRequest() {
    *this = ::std::move(from);
  }

  inline GetAttributeRequest& operator=(GetAttributeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAttributeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAttributeRequest* internal_default_instance() {
    return reinterpret_cast<const GetAttributeRequest*>(
               &_GetAttributeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetAttributeRequest* other);
  friend void swap(GetAttributeRequest& a, GetAttributeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAttributeRequest* New() const final {
    return CreateMaybeMessage<GetAttributeRequest>(NULL);
  }

  GetAttributeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAttributeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAttributeRequest& from);
  void MergeFrom(const GetAttributeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAttributeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string index_name = 1;
  void clear_index_name();
  static const int kIndexNameFieldNumber = 1;
  const ::std::string& index_name() const;
  void set_index_name(const ::std::string& value);
  #if LANG_CXX11
  void set_index_name(::std::string&& value);
  #endif
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  ::std::string* mutable_index_name();
  ::std::string* release_index_name();
  void set_allocated_index_name(::std::string* index_name);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.GetAttributeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr index_name_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_index_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAttributeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.GetAttributeResponse) */ {
 public:
  GetAttributeResponse();
  virtual ~GetAttributeResponse();

  GetAttributeResponse(const GetAttributeResponse& from);

  inline GetAttributeResponse& operator=(const GetAttributeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAttributeResponse(GetAttributeResponse&& from) noexcept
    : GetAttributeResponse() {
    *this = ::std::move(from);
  }

  inline GetAttributeResponse& operator=(GetAttributeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAttributeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAttributeResponse* internal_default_instance() {
    return reinterpret_cast<const GetAttributeResponse*>(
               &_GetAttributeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetAttributeResponse* other);
  friend void swap(GetAttributeResponse& a, GetAttributeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAttributeResponse* New() const final {
    return CreateMaybeMessage<GetAttributeResponse>(NULL);
  }

  GetAttributeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAttributeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAttributeResponse& from);
  void MergeFrom(const GetAttributeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAttributeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.GetAttributeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_index_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InsertOrUpdateDocumentOp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.InsertOrUpdateDocumentOp) */ {
 public:
  InsertOrUpdateDocumentOp();
  virtual ~InsertOrUpdateDocumentOp();

  InsertOrUpdateDocumentOp(const InsertOrUpdateDocumentOp& from);

  inline InsertOrUpdateDocumentOp& operator=(const InsertOrUpdateDocumentOp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InsertOrUpdateDocumentOp(InsertOrUpdateDocumentOp&& from) noexcept
    : InsertOrUpdateDocumentOp() {
    *this = ::std::move(from);
  }

  inline InsertOrUpdateDocumentOp& operator=(InsertOrUpdateDocumentOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertOrUpdateDocumentOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertOrUpdateDocumentOp* internal_default_instance() {
    return reinterpret_cast<const InsertOrUpdateDocumentOp*>(
               &_InsertOrUpdateDocumentOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(InsertOrUpdateDocumentOp* other);
  friend void swap(InsertOrUpdateDocumentOp& a, InsertOrUpdateDocumentOp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InsertOrUpdateDocumentOp* New() const final {
    return CreateMaybeMessage<InsertOrUpdateDocumentOp>(NULL);
  }

  InsertOrUpdateDocumentOp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InsertOrUpdateDocumentOp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InsertOrUpdateDocumentOp& from);
  void MergeFrom(const InsertOrUpdateDocumentOp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertOrUpdateDocumentOp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 terms = 2;
  int terms_size() const;
  void clear_terms();
  static const int kTermsFieldNumber = 2;
  ::google::protobuf::uint32 terms(int index) const;
  void set_terms(int index, ::google::protobuf::uint32 value);
  void add_terms(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      terms() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_terms();

  // uint32 doc_id = 1;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::uint32 doc_id() const;
  void set_doc_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.InsertOrUpdateDocumentOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > terms_;
  mutable int _terms_cached_byte_size_;
  ::google::protobuf::uint32 doc_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_index_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteDocumentOp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.DeleteDocumentOp) */ {
 public:
  DeleteDocumentOp();
  virtual ~DeleteDocumentOp();

  DeleteDocumentOp(const DeleteDocumentOp& from);

  inline DeleteDocumentOp& operator=(const DeleteDocumentOp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteDocumentOp(DeleteDocumentOp&& from) noexcept
    : DeleteDocumentOp() {
    *this = ::std::move(from);
  }

  inline DeleteDocumentOp& operator=(DeleteDocumentOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteDocumentOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDocumentOp* internal_default_instance() {
    return reinterpret_cast<const DeleteDocumentOp*>(
               &_DeleteDocumentOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DeleteDocumentOp* other);
  friend void swap(DeleteDocumentOp& a, DeleteDocumentOp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteDocumentOp* New() const final {
    return CreateMaybeMessage<DeleteDocumentOp>(NULL);
  }

  DeleteDocumentOp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDocumentOp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteDocumentOp& from);
  void MergeFrom(const DeleteDocumentOp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDocumentOp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 doc_id = 1;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::uint32 doc_id() const;
  void set_doc_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.DeleteDocumentOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 doc_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_index_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetAttributeOp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.SetAttributeOp) */ {
 public:
  SetAttributeOp();
  virtual ~SetAttributeOp();

  SetAttributeOp(const SetAttributeOp& from);

  inline SetAttributeOp& operator=(const SetAttributeOp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetAttributeOp(SetAttributeOp&& from) noexcept
    : SetAttributeOp() {
    *this = ::std::move(from);
  }

  inline SetAttributeOp& operator=(SetAttributeOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetAttributeOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAttributeOp* internal_default_instance() {
    return reinterpret_cast<const SetAttributeOp*>(
               &_SetAttributeOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SetAttributeOp* other);
  friend void swap(SetAttributeOp& a, SetAttributeOp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetAttributeOp* New() const final {
    return CreateMaybeMessage<SetAttributeOp>(NULL);
  }

  SetAttributeOp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetAttributeOp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetAttributeOp& from);
  void MergeFrom(const SetAttributeOp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAttributeOp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.SetAttributeOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_index_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Operation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.Operation) */ {
 public:
  Operation();
  virtual ~Operation();

  Operation(const Operation& from);

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation& default_instance();

  enum OpCase {
    kInsertOrUpdateDocument = 1,
    kDeleteDocument = 2,
    kSetAttribute = 3,
    OP_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Operation* other);
  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return CreateMaybeMessage<Operation>(NULL);
  }

  Operation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Acoustid.Server.PB.InsertOrUpdateDocumentOp insert_or_update_document = 1;
  bool has_insert_or_update_document() const;
  void clear_insert_or_update_document();
  static const int kInsertOrUpdateDocumentFieldNumber = 1;
  private:
  const ::Acoustid::Server::PB::InsertOrUpdateDocumentOp& _internal_insert_or_update_document() const;
  public:
  const ::Acoustid::Server::PB::InsertOrUpdateDocumentOp& insert_or_update_document() const;
  ::Acoustid::Server::PB::InsertOrUpdateDocumentOp* release_insert_or_update_document();
  ::Acoustid::Server::PB::InsertOrUpdateDocumentOp* mutable_insert_or_update_document();
  void set_allocated_insert_or_update_document(::Acoustid::Server::PB::InsertOrUpdateDocumentOp* insert_or_update_document);

  // .Acoustid.Server.PB.DeleteDocumentOp delete_document = 2;
  bool has_delete_document() const;
  void clear_delete_document();
  static const int kDeleteDocumentFieldNumber = 2;
  private:
  const ::Acoustid::Server::PB::DeleteDocumentOp& _internal_delete_document() const;
  public:
  const ::Acoustid::Server::PB::DeleteDocumentOp& delete_document() const;
  ::Acoustid::Server::PB::DeleteDocumentOp* release_delete_document();
  ::Acoustid::Server::PB::DeleteDocumentOp* mutable_delete_document();
  void set_allocated_delete_document(::Acoustid::Server::PB::DeleteDocumentOp* delete_document);

  // .Acoustid.Server.PB.SetAttributeOp set_attribute = 3;
  bool has_set_attribute() const;
  void clear_set_attribute();
  static const int kSetAttributeFieldNumber = 3;
  private:
  const ::Acoustid::Server::PB::SetAttributeOp& _internal_set_attribute() const;
  public:
  const ::Acoustid::Server::PB::SetAttributeOp& set_attribute() const;
  ::Acoustid::Server::PB::SetAttributeOp* release_set_attribute();
  ::Acoustid::Server::PB::SetAttributeOp* mutable_set_attribute();
  void set_allocated_set_attribute(::Acoustid::Server::PB::SetAttributeOp* set_attribute);

  void clear_op();
  OpCase op_case() const;
  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.Operation)
 private:
  void set_has_insert_or_update_document();
  void set_has_delete_document();
  void set_has_set_attribute();

  inline bool has_op() const;
  inline void clear_has_op();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union OpUnion {
    OpUnion() {}
    ::Acoustid::Server::PB::InsertOrUpdateDocumentOp* insert_or_update_document_;
    ::Acoustid::Server::PB::DeleteDocumentOp* delete_document_;
    ::Acoustid::Server::PB::SetAttributeOp* set_attribute_;
  } op_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_index_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BulkUpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.BulkUpdateRequest) */ {
 public:
  BulkUpdateRequest();
  virtual ~BulkUpdateRequest();

  BulkUpdateRequest(const BulkUpdateRequest& from);

  inline BulkUpdateRequest& operator=(const BulkUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BulkUpdateRequest(BulkUpdateRequest&& from) noexcept
    : BulkUpdateRequest() {
    *this = ::std::move(from);
  }

  inline BulkUpdateRequest& operator=(BulkUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BulkUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulkUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const BulkUpdateRequest*>(
               &_BulkUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(BulkUpdateRequest* other);
  friend void swap(BulkUpdateRequest& a, BulkUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BulkUpdateRequest* New() const final {
    return CreateMaybeMessage<BulkUpdateRequest>(NULL);
  }

  BulkUpdateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BulkUpdateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BulkUpdateRequest& from);
  void MergeFrom(const BulkUpdateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Acoustid.Server.PB.Operation ops = 2;
  int ops_size() const;
  void clear_ops();
  static const int kOpsFieldNumber = 2;
  ::Acoustid::Server::PB::Operation* mutable_ops(int index);
  ::google::protobuf::RepeatedPtrField< ::Acoustid::Server::PB::Operation >*
      mutable_ops();
  const ::Acoustid::Server::PB::Operation& ops(int index) const;
  ::Acoustid::Server::PB::Operation* add_ops();
  const ::google::protobuf::RepeatedPtrField< ::Acoustid::Server::PB::Operation >&
      ops() const;

  // string index_name = 1;
  void clear_index_name();
  static const int kIndexNameFieldNumber = 1;
  const ::std::string& index_name() const;
  void set_index_name(const ::std::string& value);
  #if LANG_CXX11
  void set_index_name(::std::string&& value);
  #endif
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  ::std::string* mutable_index_name();
  ::std::string* release_index_name();
  void set_allocated_index_name(::std::string* index_name);

  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.BulkUpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Acoustid::Server::PB::Operation > ops_;
  ::google::protobuf::internal::ArenaStringPtr index_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_index_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BulkUpdateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.BulkUpdateResponse) */ {
 public:
  BulkUpdateResponse();
  virtual ~BulkUpdateResponse();

  BulkUpdateResponse(const BulkUpdateResponse& from);

  inline BulkUpdateResponse& operator=(const BulkUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BulkUpdateResponse(BulkUpdateResponse&& from) noexcept
    : BulkUpdateResponse() {
    *this = ::std::move(from);
  }

  inline BulkUpdateResponse& operator=(BulkUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BulkUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulkUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const BulkUpdateResponse*>(
               &_BulkUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(BulkUpdateResponse* other);
  friend void swap(BulkUpdateResponse& a, BulkUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BulkUpdateResponse* New() const final {
    return CreateMaybeMessage<BulkUpdateResponse>(NULL);
  }

  BulkUpdateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BulkUpdateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BulkUpdateResponse& from);
  void MergeFrom(const BulkUpdateResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.BulkUpdateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_index_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.SearchResult) */ {
 public:
  SearchResult();
  virtual ~SearchResult();

  SearchResult(const SearchResult& from);

  inline SearchResult& operator=(const SearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchResult(SearchResult&& from) noexcept
    : SearchResult() {
    *this = ::std::move(from);
  }

  inline SearchResult& operator=(SearchResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResult* internal_default_instance() {
    return reinterpret_cast<const SearchResult*>(
               &_SearchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SearchResult* other);
  friend void swap(SearchResult& a, SearchResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchResult* New() const final {
    return CreateMaybeMessage<SearchResult>(NULL);
  }

  SearchResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchResult& from);
  void MergeFrom(const SearchResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 doc_id = 1;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::uint32 doc_id() const;
  void set_doc_id(::google::protobuf::uint32 value);

  // float score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.SearchResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 doc_id_;
  float score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_index_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SearchRequest* other);
  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(NULL);
  }

  SearchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 terms = 2;
  int terms_size() const;
  void clear_terms();
  static const int kTermsFieldNumber = 2;
  ::google::protobuf::uint32 terms(int index) const;
  void set_terms(int index, ::google::protobuf::uint32 value);
  void add_terms(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      terms() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_terms();

  // string index_name = 1;
  void clear_index_name();
  static const int kIndexNameFieldNumber = 1;
  const ::std::string& index_name() const;
  void set_index_name(const ::std::string& value);
  #if LANG_CXX11
  void set_index_name(::std::string&& value);
  #endif
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  ::std::string* mutable_index_name();
  ::std::string* release_index_name();
  void set_allocated_index_name(::std::string* index_name);

  // int32 max_results = 3;
  void clear_max_results();
  static const int kMaxResultsFieldNumber = 3;
  ::google::protobuf::int32 max_results() const;
  void set_max_results(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.SearchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > terms_;
  mutable int _terms_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr index_name_;
  ::google::protobuf::int32 max_results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_index_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Acoustid.Server.PB.SearchResponse) */ {
 public:
  SearchResponse();
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SearchResponse* other);
  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const final {
    return CreateMaybeMessage<SearchResponse>(NULL);
  }

  SearchResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Acoustid.Server.PB.SearchResult results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::Acoustid::Server::PB::SearchResult* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::Acoustid::Server::PB::SearchResult >*
      mutable_results();
  const ::Acoustid::Server::PB::SearchResult& results(int index) const;
  ::Acoustid::Server::PB::SearchResult* add_results();
  const ::google::protobuf::RepeatedPtrField< ::Acoustid::Server::PB::SearchResult >&
      results() const;

  // @@protoc_insertion_point(class_scope:Acoustid.Server.PB.SearchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Acoustid::Server::PB::SearchResult > results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_index_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetDocumentRequest

// string index_name = 1;
inline void GetDocumentRequest::clear_index_name() {
  index_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDocumentRequest::index_name() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.GetDocumentRequest.index_name)
  return index_name_.GetNoArena();
}
inline void GetDocumentRequest::set_index_name(const ::std::string& value) {
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.GetDocumentRequest.index_name)
}
#if LANG_CXX11
inline void GetDocumentRequest::set_index_name(::std::string&& value) {
  
  index_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Acoustid.Server.PB.GetDocumentRequest.index_name)
}
#endif
inline void GetDocumentRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Acoustid.Server.PB.GetDocumentRequest.index_name)
}
inline void GetDocumentRequest::set_index_name(const char* value, size_t size) {
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Acoustid.Server.PB.GetDocumentRequest.index_name)
}
inline ::std::string* GetDocumentRequest::mutable_index_name() {
  
  // @@protoc_insertion_point(field_mutable:Acoustid.Server.PB.GetDocumentRequest.index_name)
  return index_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDocumentRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:Acoustid.Server.PB.GetDocumentRequest.index_name)
  
  return index_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDocumentRequest::set_allocated_index_name(::std::string* index_name) {
  if (index_name != NULL) {
    
  } else {
    
  }
  index_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_name);
  // @@protoc_insertion_point(field_set_allocated:Acoustid.Server.PB.GetDocumentRequest.index_name)
}

// uint32 doc_id = 2;
inline void GetDocumentRequest::clear_doc_id() {
  doc_id_ = 0u;
}
inline ::google::protobuf::uint32 GetDocumentRequest::doc_id() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.GetDocumentRequest.doc_id)
  return doc_id_;
}
inline void GetDocumentRequest::set_doc_id(::google::protobuf::uint32 value) {
  
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.GetDocumentRequest.doc_id)
}

// -------------------------------------------------------------------

// GetDocumentResponse

// repeated uint32 terms = 2;
inline int GetDocumentResponse::terms_size() const {
  return terms_.size();
}
inline void GetDocumentResponse::clear_terms() {
  terms_.Clear();
}
inline ::google::protobuf::uint32 GetDocumentResponse::terms(int index) const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.GetDocumentResponse.terms)
  return terms_.Get(index);
}
inline void GetDocumentResponse::set_terms(int index, ::google::protobuf::uint32 value) {
  terms_.Set(index, value);
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.GetDocumentResponse.terms)
}
inline void GetDocumentResponse::add_terms(::google::protobuf::uint32 value) {
  terms_.Add(value);
  // @@protoc_insertion_point(field_add:Acoustid.Server.PB.GetDocumentResponse.terms)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GetDocumentResponse::terms() const {
  // @@protoc_insertion_point(field_list:Acoustid.Server.PB.GetDocumentResponse.terms)
  return terms_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GetDocumentResponse::mutable_terms() {
  // @@protoc_insertion_point(field_mutable_list:Acoustid.Server.PB.GetDocumentResponse.terms)
  return &terms_;
}

// -------------------------------------------------------------------

// GetAttributeRequest

// string index_name = 1;
inline void GetAttributeRequest::clear_index_name() {
  index_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAttributeRequest::index_name() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.GetAttributeRequest.index_name)
  return index_name_.GetNoArena();
}
inline void GetAttributeRequest::set_index_name(const ::std::string& value) {
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.GetAttributeRequest.index_name)
}
#if LANG_CXX11
inline void GetAttributeRequest::set_index_name(::std::string&& value) {
  
  index_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Acoustid.Server.PB.GetAttributeRequest.index_name)
}
#endif
inline void GetAttributeRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Acoustid.Server.PB.GetAttributeRequest.index_name)
}
inline void GetAttributeRequest::set_index_name(const char* value, size_t size) {
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Acoustid.Server.PB.GetAttributeRequest.index_name)
}
inline ::std::string* GetAttributeRequest::mutable_index_name() {
  
  // @@protoc_insertion_point(field_mutable:Acoustid.Server.PB.GetAttributeRequest.index_name)
  return index_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAttributeRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:Acoustid.Server.PB.GetAttributeRequest.index_name)
  
  return index_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAttributeRequest::set_allocated_index_name(::std::string* index_name) {
  if (index_name != NULL) {
    
  } else {
    
  }
  index_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_name);
  // @@protoc_insertion_point(field_set_allocated:Acoustid.Server.PB.GetAttributeRequest.index_name)
}

// string name = 2;
inline void GetAttributeRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAttributeRequest::name() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.GetAttributeRequest.name)
  return name_.GetNoArena();
}
inline void GetAttributeRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.GetAttributeRequest.name)
}
#if LANG_CXX11
inline void GetAttributeRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Acoustid.Server.PB.GetAttributeRequest.name)
}
#endif
inline void GetAttributeRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Acoustid.Server.PB.GetAttributeRequest.name)
}
inline void GetAttributeRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Acoustid.Server.PB.GetAttributeRequest.name)
}
inline ::std::string* GetAttributeRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Acoustid.Server.PB.GetAttributeRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAttributeRequest::release_name() {
  // @@protoc_insertion_point(field_release:Acoustid.Server.PB.GetAttributeRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAttributeRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Acoustid.Server.PB.GetAttributeRequest.name)
}

// -------------------------------------------------------------------

// GetAttributeResponse

// string value = 2;
inline void GetAttributeResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAttributeResponse::value() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.GetAttributeResponse.value)
  return value_.GetNoArena();
}
inline void GetAttributeResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.GetAttributeResponse.value)
}
#if LANG_CXX11
inline void GetAttributeResponse::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Acoustid.Server.PB.GetAttributeResponse.value)
}
#endif
inline void GetAttributeResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Acoustid.Server.PB.GetAttributeResponse.value)
}
inline void GetAttributeResponse::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Acoustid.Server.PB.GetAttributeResponse.value)
}
inline ::std::string* GetAttributeResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Acoustid.Server.PB.GetAttributeResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAttributeResponse::release_value() {
  // @@protoc_insertion_point(field_release:Acoustid.Server.PB.GetAttributeResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAttributeResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Acoustid.Server.PB.GetAttributeResponse.value)
}

// -------------------------------------------------------------------

// InsertOrUpdateDocumentOp

// uint32 doc_id = 1;
inline void InsertOrUpdateDocumentOp::clear_doc_id() {
  doc_id_ = 0u;
}
inline ::google::protobuf::uint32 InsertOrUpdateDocumentOp::doc_id() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.InsertOrUpdateDocumentOp.doc_id)
  return doc_id_;
}
inline void InsertOrUpdateDocumentOp::set_doc_id(::google::protobuf::uint32 value) {
  
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.InsertOrUpdateDocumentOp.doc_id)
}

// repeated uint32 terms = 2;
inline int InsertOrUpdateDocumentOp::terms_size() const {
  return terms_.size();
}
inline void InsertOrUpdateDocumentOp::clear_terms() {
  terms_.Clear();
}
inline ::google::protobuf::uint32 InsertOrUpdateDocumentOp::terms(int index) const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.InsertOrUpdateDocumentOp.terms)
  return terms_.Get(index);
}
inline void InsertOrUpdateDocumentOp::set_terms(int index, ::google::protobuf::uint32 value) {
  terms_.Set(index, value);
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.InsertOrUpdateDocumentOp.terms)
}
inline void InsertOrUpdateDocumentOp::add_terms(::google::protobuf::uint32 value) {
  terms_.Add(value);
  // @@protoc_insertion_point(field_add:Acoustid.Server.PB.InsertOrUpdateDocumentOp.terms)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InsertOrUpdateDocumentOp::terms() const {
  // @@protoc_insertion_point(field_list:Acoustid.Server.PB.InsertOrUpdateDocumentOp.terms)
  return terms_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InsertOrUpdateDocumentOp::mutable_terms() {
  // @@protoc_insertion_point(field_mutable_list:Acoustid.Server.PB.InsertOrUpdateDocumentOp.terms)
  return &terms_;
}

// -------------------------------------------------------------------

// DeleteDocumentOp

// uint32 doc_id = 1;
inline void DeleteDocumentOp::clear_doc_id() {
  doc_id_ = 0u;
}
inline ::google::protobuf::uint32 DeleteDocumentOp::doc_id() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.DeleteDocumentOp.doc_id)
  return doc_id_;
}
inline void DeleteDocumentOp::set_doc_id(::google::protobuf::uint32 value) {
  
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.DeleteDocumentOp.doc_id)
}

// -------------------------------------------------------------------

// SetAttributeOp

// string name = 1;
inline void SetAttributeOp::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAttributeOp::name() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.SetAttributeOp.name)
  return name_.GetNoArena();
}
inline void SetAttributeOp::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.SetAttributeOp.name)
}
#if LANG_CXX11
inline void SetAttributeOp::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Acoustid.Server.PB.SetAttributeOp.name)
}
#endif
inline void SetAttributeOp::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Acoustid.Server.PB.SetAttributeOp.name)
}
inline void SetAttributeOp::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Acoustid.Server.PB.SetAttributeOp.name)
}
inline ::std::string* SetAttributeOp::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Acoustid.Server.PB.SetAttributeOp.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAttributeOp::release_name() {
  // @@protoc_insertion_point(field_release:Acoustid.Server.PB.SetAttributeOp.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAttributeOp::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Acoustid.Server.PB.SetAttributeOp.name)
}

// string value = 2;
inline void SetAttributeOp::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAttributeOp::value() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.SetAttributeOp.value)
  return value_.GetNoArena();
}
inline void SetAttributeOp::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.SetAttributeOp.value)
}
#if LANG_CXX11
inline void SetAttributeOp::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Acoustid.Server.PB.SetAttributeOp.value)
}
#endif
inline void SetAttributeOp::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Acoustid.Server.PB.SetAttributeOp.value)
}
inline void SetAttributeOp::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Acoustid.Server.PB.SetAttributeOp.value)
}
inline ::std::string* SetAttributeOp::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Acoustid.Server.PB.SetAttributeOp.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAttributeOp::release_value() {
  // @@protoc_insertion_point(field_release:Acoustid.Server.PB.SetAttributeOp.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAttributeOp::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Acoustid.Server.PB.SetAttributeOp.value)
}

// -------------------------------------------------------------------

// Operation

// .Acoustid.Server.PB.InsertOrUpdateDocumentOp insert_or_update_document = 1;
inline bool Operation::has_insert_or_update_document() const {
  return op_case() == kInsertOrUpdateDocument;
}
inline void Operation::set_has_insert_or_update_document() {
  _oneof_case_[0] = kInsertOrUpdateDocument;
}
inline void Operation::clear_insert_or_update_document() {
  if (has_insert_or_update_document()) {
    delete op_.insert_or_update_document_;
    clear_has_op();
  }
}
inline const ::Acoustid::Server::PB::InsertOrUpdateDocumentOp& Operation::_internal_insert_or_update_document() const {
  return *op_.insert_or_update_document_;
}
inline ::Acoustid::Server::PB::InsertOrUpdateDocumentOp* Operation::release_insert_or_update_document() {
  // @@protoc_insertion_point(field_release:Acoustid.Server.PB.Operation.insert_or_update_document)
  if (has_insert_or_update_document()) {
    clear_has_op();
      ::Acoustid::Server::PB::InsertOrUpdateDocumentOp* temp = op_.insert_or_update_document_;
    op_.insert_or_update_document_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::Acoustid::Server::PB::InsertOrUpdateDocumentOp& Operation::insert_or_update_document() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.Operation.insert_or_update_document)
  return has_insert_or_update_document()
      ? *op_.insert_or_update_document_
      : *reinterpret_cast< ::Acoustid::Server::PB::InsertOrUpdateDocumentOp*>(&::Acoustid::Server::PB::_InsertOrUpdateDocumentOp_default_instance_);
}
inline ::Acoustid::Server::PB::InsertOrUpdateDocumentOp* Operation::mutable_insert_or_update_document() {
  if (!has_insert_or_update_document()) {
    clear_op();
    set_has_insert_or_update_document();
    op_.insert_or_update_document_ = CreateMaybeMessage< ::Acoustid::Server::PB::InsertOrUpdateDocumentOp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Acoustid.Server.PB.Operation.insert_or_update_document)
  return op_.insert_or_update_document_;
}

// .Acoustid.Server.PB.DeleteDocumentOp delete_document = 2;
inline bool Operation::has_delete_document() const {
  return op_case() == kDeleteDocument;
}
inline void Operation::set_has_delete_document() {
  _oneof_case_[0] = kDeleteDocument;
}
inline void Operation::clear_delete_document() {
  if (has_delete_document()) {
    delete op_.delete_document_;
    clear_has_op();
  }
}
inline const ::Acoustid::Server::PB::DeleteDocumentOp& Operation::_internal_delete_document() const {
  return *op_.delete_document_;
}
inline ::Acoustid::Server::PB::DeleteDocumentOp* Operation::release_delete_document() {
  // @@protoc_insertion_point(field_release:Acoustid.Server.PB.Operation.delete_document)
  if (has_delete_document()) {
    clear_has_op();
      ::Acoustid::Server::PB::DeleteDocumentOp* temp = op_.delete_document_;
    op_.delete_document_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::Acoustid::Server::PB::DeleteDocumentOp& Operation::delete_document() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.Operation.delete_document)
  return has_delete_document()
      ? *op_.delete_document_
      : *reinterpret_cast< ::Acoustid::Server::PB::DeleteDocumentOp*>(&::Acoustid::Server::PB::_DeleteDocumentOp_default_instance_);
}
inline ::Acoustid::Server::PB::DeleteDocumentOp* Operation::mutable_delete_document() {
  if (!has_delete_document()) {
    clear_op();
    set_has_delete_document();
    op_.delete_document_ = CreateMaybeMessage< ::Acoustid::Server::PB::DeleteDocumentOp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Acoustid.Server.PB.Operation.delete_document)
  return op_.delete_document_;
}

// .Acoustid.Server.PB.SetAttributeOp set_attribute = 3;
inline bool Operation::has_set_attribute() const {
  return op_case() == kSetAttribute;
}
inline void Operation::set_has_set_attribute() {
  _oneof_case_[0] = kSetAttribute;
}
inline void Operation::clear_set_attribute() {
  if (has_set_attribute()) {
    delete op_.set_attribute_;
    clear_has_op();
  }
}
inline const ::Acoustid::Server::PB::SetAttributeOp& Operation::_internal_set_attribute() const {
  return *op_.set_attribute_;
}
inline ::Acoustid::Server::PB::SetAttributeOp* Operation::release_set_attribute() {
  // @@protoc_insertion_point(field_release:Acoustid.Server.PB.Operation.set_attribute)
  if (has_set_attribute()) {
    clear_has_op();
      ::Acoustid::Server::PB::SetAttributeOp* temp = op_.set_attribute_;
    op_.set_attribute_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::Acoustid::Server::PB::SetAttributeOp& Operation::set_attribute() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.Operation.set_attribute)
  return has_set_attribute()
      ? *op_.set_attribute_
      : *reinterpret_cast< ::Acoustid::Server::PB::SetAttributeOp*>(&::Acoustid::Server::PB::_SetAttributeOp_default_instance_);
}
inline ::Acoustid::Server::PB::SetAttributeOp* Operation::mutable_set_attribute() {
  if (!has_set_attribute()) {
    clear_op();
    set_has_set_attribute();
    op_.set_attribute_ = CreateMaybeMessage< ::Acoustid::Server::PB::SetAttributeOp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Acoustid.Server.PB.Operation.set_attribute)
  return op_.set_attribute_;
}

inline bool Operation::has_op() const {
  return op_case() != OP_NOT_SET;
}
inline void Operation::clear_has_op() {
  _oneof_case_[0] = OP_NOT_SET;
}
inline Operation::OpCase Operation::op_case() const {
  return Operation::OpCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BulkUpdateRequest

// string index_name = 1;
inline void BulkUpdateRequest::clear_index_name() {
  index_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BulkUpdateRequest::index_name() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.BulkUpdateRequest.index_name)
  return index_name_.GetNoArena();
}
inline void BulkUpdateRequest::set_index_name(const ::std::string& value) {
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.BulkUpdateRequest.index_name)
}
#if LANG_CXX11
inline void BulkUpdateRequest::set_index_name(::std::string&& value) {
  
  index_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Acoustid.Server.PB.BulkUpdateRequest.index_name)
}
#endif
inline void BulkUpdateRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Acoustid.Server.PB.BulkUpdateRequest.index_name)
}
inline void BulkUpdateRequest::set_index_name(const char* value, size_t size) {
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Acoustid.Server.PB.BulkUpdateRequest.index_name)
}
inline ::std::string* BulkUpdateRequest::mutable_index_name() {
  
  // @@protoc_insertion_point(field_mutable:Acoustid.Server.PB.BulkUpdateRequest.index_name)
  return index_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulkUpdateRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:Acoustid.Server.PB.BulkUpdateRequest.index_name)
  
  return index_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BulkUpdateRequest::set_allocated_index_name(::std::string* index_name) {
  if (index_name != NULL) {
    
  } else {
    
  }
  index_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_name);
  // @@protoc_insertion_point(field_set_allocated:Acoustid.Server.PB.BulkUpdateRequest.index_name)
}

// repeated .Acoustid.Server.PB.Operation ops = 2;
inline int BulkUpdateRequest::ops_size() const {
  return ops_.size();
}
inline void BulkUpdateRequest::clear_ops() {
  ops_.Clear();
}
inline ::Acoustid::Server::PB::Operation* BulkUpdateRequest::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:Acoustid.Server.PB.BulkUpdateRequest.ops)
  return ops_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Acoustid::Server::PB::Operation >*
BulkUpdateRequest::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:Acoustid.Server.PB.BulkUpdateRequest.ops)
  return &ops_;
}
inline const ::Acoustid::Server::PB::Operation& BulkUpdateRequest::ops(int index) const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.BulkUpdateRequest.ops)
  return ops_.Get(index);
}
inline ::Acoustid::Server::PB::Operation* BulkUpdateRequest::add_ops() {
  // @@protoc_insertion_point(field_add:Acoustid.Server.PB.BulkUpdateRequest.ops)
  return ops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Acoustid::Server::PB::Operation >&
BulkUpdateRequest::ops() const {
  // @@protoc_insertion_point(field_list:Acoustid.Server.PB.BulkUpdateRequest.ops)
  return ops_;
}

// -------------------------------------------------------------------

// BulkUpdateResponse

// -------------------------------------------------------------------

// SearchResult

// uint32 doc_id = 1;
inline void SearchResult::clear_doc_id() {
  doc_id_ = 0u;
}
inline ::google::protobuf::uint32 SearchResult::doc_id() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.SearchResult.doc_id)
  return doc_id_;
}
inline void SearchResult::set_doc_id(::google::protobuf::uint32 value) {
  
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.SearchResult.doc_id)
}

// float score = 2;
inline void SearchResult::clear_score() {
  score_ = 0;
}
inline float SearchResult::score() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.SearchResult.score)
  return score_;
}
inline void SearchResult::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.SearchResult.score)
}

// -------------------------------------------------------------------

// SearchRequest

// string index_name = 1;
inline void SearchRequest::clear_index_name() {
  index_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchRequest::index_name() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.SearchRequest.index_name)
  return index_name_.GetNoArena();
}
inline void SearchRequest::set_index_name(const ::std::string& value) {
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.SearchRequest.index_name)
}
#if LANG_CXX11
inline void SearchRequest::set_index_name(::std::string&& value) {
  
  index_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Acoustid.Server.PB.SearchRequest.index_name)
}
#endif
inline void SearchRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Acoustid.Server.PB.SearchRequest.index_name)
}
inline void SearchRequest::set_index_name(const char* value, size_t size) {
  
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Acoustid.Server.PB.SearchRequest.index_name)
}
inline ::std::string* SearchRequest::mutable_index_name() {
  
  // @@protoc_insertion_point(field_mutable:Acoustid.Server.PB.SearchRequest.index_name)
  return index_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:Acoustid.Server.PB.SearchRequest.index_name)
  
  return index_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_index_name(::std::string* index_name) {
  if (index_name != NULL) {
    
  } else {
    
  }
  index_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_name);
  // @@protoc_insertion_point(field_set_allocated:Acoustid.Server.PB.SearchRequest.index_name)
}

// repeated uint32 terms = 2;
inline int SearchRequest::terms_size() const {
  return terms_.size();
}
inline void SearchRequest::clear_terms() {
  terms_.Clear();
}
inline ::google::protobuf::uint32 SearchRequest::terms(int index) const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.SearchRequest.terms)
  return terms_.Get(index);
}
inline void SearchRequest::set_terms(int index, ::google::protobuf::uint32 value) {
  terms_.Set(index, value);
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.SearchRequest.terms)
}
inline void SearchRequest::add_terms(::google::protobuf::uint32 value) {
  terms_.Add(value);
  // @@protoc_insertion_point(field_add:Acoustid.Server.PB.SearchRequest.terms)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SearchRequest::terms() const {
  // @@protoc_insertion_point(field_list:Acoustid.Server.PB.SearchRequest.terms)
  return terms_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SearchRequest::mutable_terms() {
  // @@protoc_insertion_point(field_mutable_list:Acoustid.Server.PB.SearchRequest.terms)
  return &terms_;
}

// int32 max_results = 3;
inline void SearchRequest::clear_max_results() {
  max_results_ = 0;
}
inline ::google::protobuf::int32 SearchRequest::max_results() const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.SearchRequest.max_results)
  return max_results_;
}
inline void SearchRequest::set_max_results(::google::protobuf::int32 value) {
  
  max_results_ = value;
  // @@protoc_insertion_point(field_set:Acoustid.Server.PB.SearchRequest.max_results)
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .Acoustid.Server.PB.SearchResult results = 1;
inline int SearchResponse::results_size() const {
  return results_.size();
}
inline void SearchResponse::clear_results() {
  results_.Clear();
}
inline ::Acoustid::Server::PB::SearchResult* SearchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:Acoustid.Server.PB.SearchResponse.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Acoustid::Server::PB::SearchResult >*
SearchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:Acoustid.Server.PB.SearchResponse.results)
  return &results_;
}
inline const ::Acoustid::Server::PB::SearchResult& SearchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:Acoustid.Server.PB.SearchResponse.results)
  return results_.Get(index);
}
inline ::Acoustid::Server::PB::SearchResult* SearchResponse::add_results() {
  // @@protoc_insertion_point(field_add:Acoustid.Server.PB.SearchResponse.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Acoustid::Server::PB::SearchResult >&
SearchResponse::results() const {
  // @@protoc_insertion_point(field_list:Acoustid.Server.PB.SearchResponse.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB
}  // namespace Server
}  // namespace Acoustid

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_index_2eproto
