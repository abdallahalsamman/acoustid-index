// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: index.proto

#include "index.pb.h"
#include "index.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Acoustid {
namespace Server {
namespace PB {

static const char* Index_method_names[] = {
  "/Acoustid.Server.PB.Index/GetIndex",
  "/Acoustid.Server.PB.Index/CreateIndex",
  "/Acoustid.Server.PB.Index/DeleteIndex",
  "/Acoustid.Server.PB.Index/GetDocument",
  "/Acoustid.Server.PB.Index/InsertOrUpdateDocument",
  "/Acoustid.Server.PB.Index/DeleteDocument",
  "/Acoustid.Server.PB.Index/Search",
};

std::unique_ptr< Index::Stub> Index::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Index::Stub> stub(new Index::Stub(channel));
  return stub;
}

Index::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetIndex_(Index_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateIndex_(Index_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteIndex_(Index_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDocument_(Index_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsertOrUpdateDocument_(Index_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDocument_(Index_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Search_(Index_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Index::Stub::GetIndex(::grpc::ClientContext* context, const ::Acoustid::Server::PB::GetIndexRequest& request, ::Acoustid::Server::PB::GetIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetIndex_, context, request, response);
}

void Index::Stub::experimental_async::GetIndex(::grpc::ClientContext* context, const ::Acoustid::Server::PB::GetIndexRequest* request, ::Acoustid::Server::PB::GetIndexResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetIndex_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Acoustid::Server::PB::GetIndexResponse>* Index::Stub::AsyncGetIndexRaw(::grpc::ClientContext* context, const ::Acoustid::Server::PB::GetIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Acoustid::Server::PB::GetIndexResponse>::Create(channel_.get(), cq, rpcmethod_GetIndex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Acoustid::Server::PB::GetIndexResponse>* Index::Stub::PrepareAsyncGetIndexRaw(::grpc::ClientContext* context, const ::Acoustid::Server::PB::GetIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Acoustid::Server::PB::GetIndexResponse>::Create(channel_.get(), cq, rpcmethod_GetIndex_, context, request, false);
}

::grpc::Status Index::Stub::CreateIndex(::grpc::ClientContext* context, const ::Acoustid::Server::PB::CreateIndexRequest& request, ::Acoustid::Server::PB::CreateIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateIndex_, context, request, response);
}

void Index::Stub::experimental_async::CreateIndex(::grpc::ClientContext* context, const ::Acoustid::Server::PB::CreateIndexRequest* request, ::Acoustid::Server::PB::CreateIndexResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateIndex_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Acoustid::Server::PB::CreateIndexResponse>* Index::Stub::AsyncCreateIndexRaw(::grpc::ClientContext* context, const ::Acoustid::Server::PB::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Acoustid::Server::PB::CreateIndexResponse>::Create(channel_.get(), cq, rpcmethod_CreateIndex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Acoustid::Server::PB::CreateIndexResponse>* Index::Stub::PrepareAsyncCreateIndexRaw(::grpc::ClientContext* context, const ::Acoustid::Server::PB::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Acoustid::Server::PB::CreateIndexResponse>::Create(channel_.get(), cq, rpcmethod_CreateIndex_, context, request, false);
}

::grpc::Status Index::Stub::DeleteIndex(::grpc::ClientContext* context, const ::Acoustid::Server::PB::DeleteIndexRequest& request, ::Acoustid::Server::PB::DeleteIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteIndex_, context, request, response);
}

void Index::Stub::experimental_async::DeleteIndex(::grpc::ClientContext* context, const ::Acoustid::Server::PB::DeleteIndexRequest* request, ::Acoustid::Server::PB::DeleteIndexResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteIndex_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Acoustid::Server::PB::DeleteIndexResponse>* Index::Stub::AsyncDeleteIndexRaw(::grpc::ClientContext* context, const ::Acoustid::Server::PB::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Acoustid::Server::PB::DeleteIndexResponse>::Create(channel_.get(), cq, rpcmethod_DeleteIndex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Acoustid::Server::PB::DeleteIndexResponse>* Index::Stub::PrepareAsyncDeleteIndexRaw(::grpc::ClientContext* context, const ::Acoustid::Server::PB::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Acoustid::Server::PB::DeleteIndexResponse>::Create(channel_.get(), cq, rpcmethod_DeleteIndex_, context, request, false);
}

::grpc::Status Index::Stub::GetDocument(::grpc::ClientContext* context, const ::Acoustid::Server::PB::GetDocumentRequest& request, ::Acoustid::Server::PB::GetDocumentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDocument_, context, request, response);
}

void Index::Stub::experimental_async::GetDocument(::grpc::ClientContext* context, const ::Acoustid::Server::PB::GetDocumentRequest* request, ::Acoustid::Server::PB::GetDocumentResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDocument_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Acoustid::Server::PB::GetDocumentResponse>* Index::Stub::AsyncGetDocumentRaw(::grpc::ClientContext* context, const ::Acoustid::Server::PB::GetDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Acoustid::Server::PB::GetDocumentResponse>::Create(channel_.get(), cq, rpcmethod_GetDocument_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Acoustid::Server::PB::GetDocumentResponse>* Index::Stub::PrepareAsyncGetDocumentRaw(::grpc::ClientContext* context, const ::Acoustid::Server::PB::GetDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Acoustid::Server::PB::GetDocumentResponse>::Create(channel_.get(), cq, rpcmethod_GetDocument_, context, request, false);
}

::grpc::Status Index::Stub::InsertOrUpdateDocument(::grpc::ClientContext* context, const ::Acoustid::Server::PB::InsertOrUpdateDocumentRequest& request, ::Acoustid::Server::PB::InsertOrUpdateDocumentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InsertOrUpdateDocument_, context, request, response);
}

void Index::Stub::experimental_async::InsertOrUpdateDocument(::grpc::ClientContext* context, const ::Acoustid::Server::PB::InsertOrUpdateDocumentRequest* request, ::Acoustid::Server::PB::InsertOrUpdateDocumentResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InsertOrUpdateDocument_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Acoustid::Server::PB::InsertOrUpdateDocumentResponse>* Index::Stub::AsyncInsertOrUpdateDocumentRaw(::grpc::ClientContext* context, const ::Acoustid::Server::PB::InsertOrUpdateDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Acoustid::Server::PB::InsertOrUpdateDocumentResponse>::Create(channel_.get(), cq, rpcmethod_InsertOrUpdateDocument_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Acoustid::Server::PB::InsertOrUpdateDocumentResponse>* Index::Stub::PrepareAsyncInsertOrUpdateDocumentRaw(::grpc::ClientContext* context, const ::Acoustid::Server::PB::InsertOrUpdateDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Acoustid::Server::PB::InsertOrUpdateDocumentResponse>::Create(channel_.get(), cq, rpcmethod_InsertOrUpdateDocument_, context, request, false);
}

::grpc::Status Index::Stub::DeleteDocument(::grpc::ClientContext* context, const ::Acoustid::Server::PB::DeleteDocumentRequest& request, ::Acoustid::Server::PB::DeleteDocumentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteDocument_, context, request, response);
}

void Index::Stub::experimental_async::DeleteDocument(::grpc::ClientContext* context, const ::Acoustid::Server::PB::DeleteDocumentRequest* request, ::Acoustid::Server::PB::DeleteDocumentResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteDocument_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Acoustid::Server::PB::DeleteDocumentResponse>* Index::Stub::AsyncDeleteDocumentRaw(::grpc::ClientContext* context, const ::Acoustid::Server::PB::DeleteDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Acoustid::Server::PB::DeleteDocumentResponse>::Create(channel_.get(), cq, rpcmethod_DeleteDocument_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Acoustid::Server::PB::DeleteDocumentResponse>* Index::Stub::PrepareAsyncDeleteDocumentRaw(::grpc::ClientContext* context, const ::Acoustid::Server::PB::DeleteDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Acoustid::Server::PB::DeleteDocumentResponse>::Create(channel_.get(), cq, rpcmethod_DeleteDocument_, context, request, false);
}

::grpc::Status Index::Stub::Search(::grpc::ClientContext* context, const ::Acoustid::Server::PB::SearchRequest& request, ::Acoustid::Server::PB::SearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Search_, context, request, response);
}

void Index::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::Acoustid::Server::PB::SearchRequest* request, ::Acoustid::Server::PB::SearchResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Acoustid::Server::PB::SearchResponse>* Index::Stub::AsyncSearchRaw(::grpc::ClientContext* context, const ::Acoustid::Server::PB::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Acoustid::Server::PB::SearchResponse>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Acoustid::Server::PB::SearchResponse>* Index::Stub::PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::Acoustid::Server::PB::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Acoustid::Server::PB::SearchResponse>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, false);
}

Index::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Index_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Index::Service, ::Acoustid::Server::PB::GetIndexRequest, ::Acoustid::Server::PB::GetIndexResponse>(
          std::mem_fn(&Index::Service::GetIndex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Index_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Index::Service, ::Acoustid::Server::PB::CreateIndexRequest, ::Acoustid::Server::PB::CreateIndexResponse>(
          std::mem_fn(&Index::Service::CreateIndex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Index_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Index::Service, ::Acoustid::Server::PB::DeleteIndexRequest, ::Acoustid::Server::PB::DeleteIndexResponse>(
          std::mem_fn(&Index::Service::DeleteIndex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Index_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Index::Service, ::Acoustid::Server::PB::GetDocumentRequest, ::Acoustid::Server::PB::GetDocumentResponse>(
          std::mem_fn(&Index::Service::GetDocument), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Index_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Index::Service, ::Acoustid::Server::PB::InsertOrUpdateDocumentRequest, ::Acoustid::Server::PB::InsertOrUpdateDocumentResponse>(
          std::mem_fn(&Index::Service::InsertOrUpdateDocument), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Index_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Index::Service, ::Acoustid::Server::PB::DeleteDocumentRequest, ::Acoustid::Server::PB::DeleteDocumentResponse>(
          std::mem_fn(&Index::Service::DeleteDocument), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Index_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Index::Service, ::Acoustid::Server::PB::SearchRequest, ::Acoustid::Server::PB::SearchResponse>(
          std::mem_fn(&Index::Service::Search), this)));
}

Index::Service::~Service() {
}

::grpc::Status Index::Service::GetIndex(::grpc::ServerContext* context, const ::Acoustid::Server::PB::GetIndexRequest* request, ::Acoustid::Server::PB::GetIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Index::Service::CreateIndex(::grpc::ServerContext* context, const ::Acoustid::Server::PB::CreateIndexRequest* request, ::Acoustid::Server::PB::CreateIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Index::Service::DeleteIndex(::grpc::ServerContext* context, const ::Acoustid::Server::PB::DeleteIndexRequest* request, ::Acoustid::Server::PB::DeleteIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Index::Service::GetDocument(::grpc::ServerContext* context, const ::Acoustid::Server::PB::GetDocumentRequest* request, ::Acoustid::Server::PB::GetDocumentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Index::Service::InsertOrUpdateDocument(::grpc::ServerContext* context, const ::Acoustid::Server::PB::InsertOrUpdateDocumentRequest* request, ::Acoustid::Server::PB::InsertOrUpdateDocumentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Index::Service::DeleteDocument(::grpc::ServerContext* context, const ::Acoustid::Server::PB::DeleteDocumentRequest* request, ::Acoustid::Server::PB::DeleteDocumentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Index::Service::Search(::grpc::ServerContext* context, const ::Acoustid::Server::PB::SearchRequest* request, ::Acoustid::Server::PB::SearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Acoustid
}  // namespace Server
}  // namespace PB

